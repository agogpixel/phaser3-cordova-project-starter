{"version":3,"sources":["webpack:///./src/assets/textures/phaser3.png","webpack:///./src/app/app.ts","webpack:///./src/app/scenes/boot-scene.ts","webpack:///./src/app/scenes/main-scene.ts","webpack:///./src/app/scenes/preload-scene.ts","webpack:///./src/app/game-config.ts"],"names":["module","exports","app","gameConfig","game","Phaser","Game","BootScene","Scene","super","init","preload","create","this","scene","start","MainScene","centerX","centerY","cameras","main","img","add","image","events","once","Scenes","Events","TRANSITION_START","fromScene","duration","setAlpha","tweens","targets","alpha","onComplete","PreloadScene","load","transition","target","sleep","allowInput","onUpdate","progress","type","AUTO","parent","dom","createContainer","behindCanvas","pointerEvents","undefined","scale","mode","Scale","FIT","autoCenter","CENTER_BOTH","width","height","plugins","global"],"mappings":"8EAAAA,EAAOC,QAAU,IAA0B,wC,mICKpC,SAAeC,EAAIC,G,mDAGxB,MAAO,CACLC,KAAM,IAAIC,OAAOC,KAAKH,OCHnB,MAAMI,UAAkBF,OAAOG,MAIpC,cACEC,MAAM,QAMDC,QAQAC,WAOAC,SACLC,KAAKC,MAAMC,MAAM,YC5Bd,MAAMC,UAAkBX,OAAOG,MAIpC,cACEC,MAAM,QAMDC,QAQAC,WAOAC,SACL,MAAM,QAAEK,EAAO,QAAEC,GAAYL,KAAKM,QAAQC,KAEpCC,EAAMR,KAAKS,IAAIC,MAAMN,EAASC,EAAS,WAE7CL,KAAKW,OAAOC,KAAKpB,OAAOqB,OAAOC,OAAOC,kBAAkB,CAACC,EAAWC,KAClET,EAAIU,SAAS,GAEblB,KAAKmB,OAAOV,IAAI,CACdW,QAASZ,EACTa,MAAO,EACPJ,WACAK,WAAY,aCnCb,MAAMC,UAAqB/B,OAAOG,MAIvC,cACEC,MAAM,WAMDC,QAQAC,UACLE,KAAKwB,KAAKd,MAAM,UAAW,EAAQ,OAM9BX,SACLC,KAAKC,MAAMwB,WAAW,CACpBC,OAAQ,OACRT,SAAU,IACVU,OAAO,EACPC,YAAY,EAEZC,SAAWC,SCpCV,MAAM,EAA2C,CACtDC,KAAMvC,OAAOwC,KACbC,OAAQ,OACRC,IAAK,CACHC,iBAAiB,EACjBC,cAAc,EACdC,mBAAeC,GAEjBC,MAAO,CACLC,KAAMhD,OAAOiD,MAAMC,IACnBC,WAAYnD,OAAOiD,MAAMG,YACzBC,MAAO,KACPC,OAAQ,KAEVC,QAAS,CACPC,OAAQ,IAEV/C,MAAO,CAACP,EAAW6B,EAAcpB","file":"app.js","sourcesContent":["module.exports = __webpack_public_path__ + \"9194eb7ff502cb116d76f5e2408378cc.png\";","/**\n * Load the application.\n *\n * @param gameConfig Game configuration.\n */\nexport async function app(gameConfig: Phaser.Types.Core.GameConfig): Promise<{\n  game: Phaser.Game;\n}> {\n  return {\n    game: new Phaser.Game(gameConfig)\n  };\n}\n","/**\n * Boot scene.\n *\n * Suitable for loading and initializing functionality required in other scenes\n * (ie. Load basic assets, communicate with a backend, etc.).\n */\nexport class BootScene extends Phaser.Scene {\n  /**\n   * Instantiate boot scene.\n   */\n  public constructor() {\n    super('Boot');\n  }\n\n  /**\n   * Lifecycle method called before all others.\n   */\n  public init(): void {\n    // eslint-disable-next-line @typescript-eslint/no-empty-function\n  }\n\n  /**\n   * Lifecycle method called after init & before create. Ensures all assets load\n   * before create is invoked.\n   */\n  public preload(): void {\n    // eslint-disable-next-line @typescript-eslint/no-empty-function\n  }\n\n  /**\n   * Lifecycle method called after init & preload.\n   */\n  public create(): void {\n    this.scene.start('Preload');\n  }\n}\n","/**\n * Main scene.\n *\n * Suitable for game logic and display.\n */\nexport class MainScene extends Phaser.Scene {\n  /**\n   * Instantiate main scene.\n   */\n  public constructor() {\n    super('Main');\n  }\n\n  /**\n   * Lifecycle method called before all others.\n   */\n  public init(): void {\n    // eslint-disable-next-line @typescript-eslint/no-empty-function\n  }\n\n  /**\n   * Lifecycle method called after init & before create. Ensures all assets load\n   * before create is invoked.\n   */\n  public preload(): void {\n    // eslint-disable-next-line @typescript-eslint/no-empty-function\n  }\n\n  /**\n   * Lifecycle method called after init & preload.\n   */\n  public create(): void {\n    const { centerX, centerY } = this.cameras.main;\n\n    const img = this.add.image(centerX, centerY, 'phaser3');\n\n    this.events.once(Phaser.Scenes.Events.TRANSITION_START, (fromScene, duration) => {\n      img.setAlpha(0);\n\n      this.tweens.add({\n        targets: img,\n        alpha: 1,\n        duration,\n        onComplete: () => {\n          // eslint-disable-next-line @typescript-eslint/no-empty-function\n        }\n      });\n    });\n  }\n}\n","/* eslint-disable @typescript-eslint/no-var-requires */\n\n/**\n * Preload scene.\n *\n * Loads main assets & resources required for the game. Create & update load\n * progress graphics here.\n */\nexport class PreloadScene extends Phaser.Scene {\n  /**\n   * Instantiate preload scene.\n   */\n  public constructor() {\n    super('Preload');\n  }\n\n  /**\n   * Lifecycle method called before all others.\n   */\n  public init(): void {\n    // eslint-disable-next-line @typescript-eslint/no-empty-function\n  }\n\n  /**\n   * Lifecycle method called after init & before create. Ensures all assets load\n   * before create is invoked.\n   */\n  public preload(): void {\n    this.load.image('phaser3', require('../../assets/textures/phaser3.png'));\n  }\n\n  /**\n   * Lifecycle method called after init & preload.\n   */\n  public create(): void {\n    this.scene.transition({\n      target: 'Main',\n      duration: 500,\n      sleep: false,\n      allowInput: false,\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      onUpdate: (progress: number) => {\n        // eslint-disable-next-line @typescript-eslint/no-empty-function\n      }\n    });\n  }\n}\n","import { BootScene, MainScene, PreloadScene } from './scenes';\n\n/**\n * Game configuration.\n */\nexport const gameConfig: Phaser.Types.Core.GameConfig = {\n  type: Phaser.AUTO,\n  parent: 'body',\n  dom: {\n    createContainer: false,\n    behindCanvas: false,\n    pointerEvents: undefined\n  },\n  scale: {\n    mode: Phaser.Scale.FIT,\n    autoCenter: Phaser.Scale.CENTER_BOTH,\n    width: 1280,\n    height: 960\n  },\n  plugins: {\n    global: []\n  },\n  scene: [BootScene, PreloadScene, MainScene]\n};\n"],"sourceRoot":""}